Example of Puppet Manifest to deploy Wazuh nodes (it has some considerations to read).

# ----------------------- Pre requisites --------------------------------------
/* Set your hosts hostnames as master, worker1, worker2, worker3, ... as many as you want ...
 in the case you cannot change the hostname modify the node and master/worker selector lines to match your hostnames.
 Modify the variables cluster_name, cluster_key and cluster_master_address to match your environment.
 Modify the variables elastic_address, elastic_user, elastic_password and filebeat_verification to match your installation.
 Feel free to modify any value of the file to match your requirements.
*/
# ----------------------- Suggested deploy steps ------------------------------
/* This is a one time deploy file, so we recommend to put inside manifests path, deploy and delete after deploy.
 1. put this file inside manifests folder -> /etc/puppetlabs/code/environments/production/manifests/
 2. Force master to be ready before the workers, execute `puppet agent --test` inside master host.
 3. Execute `puppet agent --test` in the rest of worker nodes.
 4. Check that the master and workers are connected, also filebeat to the elastic instance.
 Suggested checks:
 `cat /var/lib/docker/volumes/wazuh_logs/_data/ossec.log`
 `cat /var/lib/docker/volumes/wazuh_logs/_data/cluster.log`
 `docker exec -it wazuh-manager-worker1 filebeat test config`
 `docker exec -it wazuh-manager-worker1 filebeat test output`
*/
# ---------------------- Internal performed steps -----------------------------
/* This file will perform the following steps:
 1. Download defined version from wazuh-docker repository and extract it inside /tmp (remember to remove after installation). Change channel of filebeat to non-oss.
 2. Build the wazuh-odfe docker image locally.
 3. Create each defined container inside container configuration (permanent configuration volumes).
 4. Deploy the previously build docker image.
 5. Set up all cluster configuration on master and workers.
 6. Restart the setup to apply the changes.
*/
# ----------------------- Puppet parameters -----------------------------------
# Common parameters
$repo_name = 'wazuh-docker'
$version = '4.1.5'
$repo_folder = "${repo_name}-${version}"
$package_name = "${repo_name}.tar.gz"
$ossec_conf_path = '/var/lib/docker/volumes/wazuh_etc/_data/ossec.conf'
# Common Cluster config
$cluster_name = '<cluster_name>'
$cluster_key = '<cluster_key>'							#It should be a HEX with 16 digits (for example generated by #openssl rand -hex 16)
$cluster_master_address = '<cluster_master_address>'
$elastic1_address = '<elastic1_address>'
$elastic2_address = '<elastic2_address>'
$elastic3_address = '<elastic3_address>'
$elastic_user = '<elastic_user>'
$elastic_password = '<elastic_password>'
$filebeat_verification = 'none'
# !! Take care with this variable !!
$cluster_config = "
<ossec_config>
  <cluster>
    <name>${cluster_name}</name>
    <node_name>${hostname}</node_name>
    <node_type>worker</node_type>
    <key>${cluster_key}</key>
    <port>1516</port>
    <bind_addr>0.0.0.0</bind_addr>
    <nodes>
        <node>${cluster_master_address}</node>
    </nodes>
    <hidden>no</hidden>
    <disabled>no</disabled>
  </cluster>
</ossec_config>"
# ------------------------ Puppet resources -----------------------------------
# Try to name your hosts like master or workers to match this expression otherwise, change it.
node /.*master.*|.*worker.*/ {
  $container = {
    name => "wazuh-manager-${hostname}",
    ports => [ '1514:1514/tcp', '1515:1515/tcp', '1516:1516/tcp', '514:514/udp', '55000:55000/tcp' ],
    environment => [
      "ELASTICSEARCH_URL=https://${elastic1_address}:9200,https://${elastic2_address}:9200,https://${elastic3_address}:9200",
      "ELASTIC_USERNAME=${elastic_user}",
      "ELASTIC_PASSWORD=${elastic_password}",
      "FILEBEAT_SSL_VERIFICATION_MODE=${filebeat_verification}"
    ],
    volumes => {
      wazuh_api_configuration => '/var/ossec/api/configuration',
      wazuh_etc => '/var/ossec/etc',
      wazuh_logs => '/var/ossec/logs',
      wazuh_queue => '/var/ossec/queue',
      wazuh_var_multigroups => '/var/ossec/var/multigroups',
      wazuh_integrations => '/var/ossec/integrations',
      wazuh_active_response => '/var/ossec/active-response/bin',
      wazuh_agentless => '/var/ossec/agentless',
      wazuh_wodles => '/var/ossec/wodles',
      filebeat_etc => '/etc/filebeat',
      filebeat_var => '/var/lib/filebeat'
    }
  }
  # Download and extract wazuh-docker repository.
  archive { $package_name:
    path => "/tmp/${package_name}",                                        
    source => "https://github.com/wazuh/wazuh-docker/archive/refs/tags/v${version}.tar.gz", 
    extract => true,
    extract_path => "/tmp",
    creates => "/tmp/${repo_folder}",
    cleanup => true
  }
   # Change filebeat channel
   exec { 'change_filebeat_channel':
    require => Archive[$package_name],
    command => "sed -i -e 's/ARG FILEBEAT_CHANNEL=filebeat-oss/ARG FILEBEAT_CHANNEL=filebeat/g' /tmp/${repo_folder}/wazuh-odfe/Dockerfile",
    path => "/usr/bin:/bin"
  }
  # Build docker manager image.
  docker::image  { 'wazuh-node':
    docker_dir => "/tmp/${repo_folder}/wazuh-odfe/"
  }
  # Create volumes for manager permanent data
  $container['volumes'].each |$key, $value| {
    docker_volume { $key:
      ensure => present
    }
  }
  # Configure and deploy container.
  docker::run { $container['name']:
    image => 'wazuh-node',
    ports => $container['ports'],
    volumes => $container['volumes'].map |$key, $value| { "${key}:${value}" },
    env => $container['environment'],
    extra_parameters => [ '--restart=always' ],
    notify => Exec['wait_for_run']
  }
  exec { 'wait_for_run':
    command => "sleep 10",
    path => "/usr/bin:/bin"
  }
  exec { 'remove_cluster_default_config':
    require => Exec['wait_for_run'],
    command => "sed -i -e '/<cluster>/,/<\/cluster>/d' ${ossec_conf_path}",
    path => "/usr/bin:/bin"
  }
  file_line { 'add_cluster_config':
    require => Exec['remove_cluster_default_config'],
    path => $ossec_conf_path,
    line => $cluster_config,
    notify => Exec['restart_container']
  }
  # Configure cluster specific part.
  if $hostname =~ /.*master.*/ {
    # Configuring master node
    file_line { 'modify_node_type':
      require => File_line['add_cluster_config'],
      path => $ossec_conf_path,
      line => "<node_type>master</node_type>",
      match => '<node_type>worker</node_type>',
      notify => Exec['restart_container']
    }
  }
  exec { 'restart_container':
    command => "docker restart ${container['name']}",
    path => "/usr/bin"
  }
}
node default {}


